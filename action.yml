name: 'HogSync - PostHog Feature Flags'
description: 'Sync feature flags to PostHog and generate TypeScript types'
author: 'Stephen Byrne'

inputs:
  version:
    description: 'HogSync version to use (default: latest)'
    required: false
    default: 'latest'
  
  config-file:
    description: 'Path to configuration file'
    required: false
    default: 'hogsync.config.js'
  
  flags-dir:
    description: 'Directory containing feature flag JSON files'
    required: false
    default: 'feature-flags'
  
  output-file:
    description: 'Output file for generated TypeScript'
    required: false
    default: 'src/generated/feature-flags.ts'
  
  posthog-host:
    description: 'PostHog host URL'
    required: false
    default: 'https://app.posthog.com'
  
  posthog-project-id:
    description: 'PostHog project ID'
    required: true
  
  posthog-api-token:
    description: 'PostHog API token'
    required: true
  
  sync-only:
    description: 'Only sync to PostHog, skip TypeScript generation'
    required: false
    default: 'false'
  
  generate-only:
    description: 'Only generate TypeScript, skip PostHog sync'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Detect platform
      shell: bash
      id: platform
      run: |
        case "${{ runner.os }}" in
          Linux)   os="linux" ;;
          macOS)   os="darwin" ;;
          Windows) os="win32" ;;
          *)       echo "Unsupported OS: ${{ runner.os }}"; exit 1 ;;
        esac
        
        case "${{ runner.arch }}" in
          X64)   arch="x64" ;;
          ARM64) arch="arm64" ;;
          *)     echo "Unsupported arch: ${{ runner.arch }}"; exit 1 ;;
        esac
        
        echo "target=${os}-${arch}" >> $GITHUB_OUTPUT
    
    - name: Download hogsync binary
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        TARGET="${{ steps.platform.outputs.target }}"
        
        if [ "$VERSION" = "latest" ]; then
          DOWNLOAD_URL="https://github.com/stephenbyrne99/hogsync/releases/latest/download/hogsync-${TARGET}.zip"
        else
          DOWNLOAD_URL="https://github.com/stephenbyrne99/hogsync/releases/download/${VERSION}/hogsync-${TARGET}.zip"
        fi
        
        echo "Downloading from: $DOWNLOAD_URL"
        curl -fsSL "$DOWNLOAD_URL" -o hogsync.zip
        
        # Extract binary
        if command -v unzip >/dev/null 2>&1; then
          unzip -q hogsync.zip
        else
          # Fallback for systems without unzip
          python -m zipfile -e hogsync.zip .
        fi
        
        # Make executable and move to expected location
        if [ -f "hogsync.exe" ]; then
          chmod +x hogsync.exe
          mv hogsync.exe hogsync
        else
          chmod +x hogsync
        fi
        
        # Verify binary works
        ./hogsync --version
    
    - name: Create config file
      shell: bash
      run: |
        cat > hogsync.config.js << 'EOF'
        module.exports = {
          flagsDir: '${{ inputs.flags-dir }}',
          outputFile: '${{ inputs.output-file }}',
          posthog: {
            host: '${{ inputs.posthog-host }}',
            projectId: '${{ inputs.posthog-project-id }}',
            apiToken: '${{ inputs.posthog-api-token }}',
          },
          generation: {
            includeLocalConfigs: true,
            namingConvention: 'snake_case',
          }
        };
        EOF
    
    - name: Sync flags to PostHog
      if: inputs.generate-only != 'true'
      shell: bash
      run: |
        ./hogsync sync --config hogsync.config.js
    
    - name: Generate TypeScript
      if: inputs.sync-only != 'true'
      shell: bash
      run: |
        ./hogsync generate --config hogsync.config.js

branding:
  icon: 'flag'
  color: 'blue'